package mtask.target;

import mtask.target.Target;

/**
	An HTML, JavaScript, CSS based application target.
**/
class Web extends App
{
	var fontStyles:String;
	var scripts:String;

	public function new()
	{
		super();

		flags.push("web");

		addMatcher(".+\\.css$", processStyles);
		addMatcher(".+\\.(ttf|otf)$", processFonts);
		addMatcher(".+\\.js$", processScripts);
	}

	override function compile()
	{
		super.compile();
		write(path + "/scripts.js", scripts);
	}

	override function processAssets(files:Array<TargetFile>, variant:String)
	{
		super.processAssets(files, variant);

		for (file in files)
		{
			var output = msys.Path.join([path, "asset", variant, file.local]);
			var dir = msys.Path.dirname(output);
			if (!exists(dir)) mkdir(dir);
			msys.FS.cp(file.absolute, output);
		}
	}

	function processScripts(files:Array<TargetFile>)
	{
		var parts = [];

		for (file in files)
		{
			if (debug) parts.push("/* from: " + file.absolute + " */");
			parts.push(StringTools.trim(read(file.absolute)));
		}

		scripts = parts.join("\n");
	}

	function processStyles(files:Array<TargetFile>)
	{
		var parts = [];

		if (fontStyles != null)
		{
			if (debug) parts.push("/* generated by mtask */");
			parts.push(fontStyles);
		}

		for (file in files)
		{
			if (debug) parts.push("/* from: " + file.absolute + " */");
			parts.push(StringTools.trim(read(file.absolute)));
		}

		write(path + "/index.css", parts.join("\n"));
	}

	function processFonts(files:Array<TargetFile>)
	{
		var fonts = [];
		for (file in files)
		{
			var url = file.local.split("\\").join("/");
			var basename = msys.Path.basename(file.local);
			var name = basename.split(".")[0];
			var family = ~/[_-]?(Bold|Regular|Italic)/g.replace(name, "");
			var variant = "";
			if (name.indexOf("Bold") > -1) variant += "font-weight:bold; ";
			if (name.indexOf("Italic") > -1) variant += "font-style:italic; ";
			var font = "@font-face { font-family:" + family + "; src:url('" + url + "'); " + variant + "}";
			fonts.push(font);
		}

		fontStyles = fonts.join("\n");
		processUnmatched(files);
	}

	override public function run()
	{
		openURL(path);
	}
}
